 ioc
ioc는 객체의 의존성을 직접 만드는것이 아니라 주입받아서 사용하는것
과거에는 xml사용을 하였으나 지금은 애노테이션을 활용한 방법이 많이 사용됨
	애노테이션의 예로는
	@Service
	@Repository
	@Autowired
	...등을 사용해서 빈으로 등록시킨 후 ioc컨테이너가 관리하는것임


스프링이 제공해주는(ioc컨테이너) 빈기능으로 빈을 등록해서 사용할시 장점
	scope
		특정 인스턴스를 한개만 만들어서 사용하면 유리한것 때문에
		싱글톤 (한개)
		프로포토타입: 매번 다른 객체
		싱글톤패턴은 메모리면에서 효율적, 런타임시 성능 최적화가 유리

	의존성 관리

	라이프사이클 인터페이스
		어떤 빈이 만들어졌을때 나는 추가적인 작업을 하고싶다?
		작업가능

스프링 ioc의 가장 최상위에 있는 인터페이스는 BeanFactory
	BeanFactory의 가장 큰 기능은 ioc

ApplicationContext
	이 인터페이스 역시 BeanFactory를 상속받은 놈임
	따라서 beanfactory가 갖는 ioc컨테이너 관련 기능역시 갖고있으면서,
	그 외에도 다양한 기능들을 상속받고 있다

리소스
	classpath에 있는 어떤 특정한 파일
	파일 시스템에 있는 어떤 특정한 파일
	웹에 있는 파일
	이러한 것들을 리소스(Resource)라고 부른다